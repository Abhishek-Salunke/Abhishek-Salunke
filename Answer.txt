#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_NODES 100
#define INF INT_MAX

// Structure to represent a directed edge in the graph
struct Edge {
    int source, target, weight;
};

// Function to find the minimum distance node from the set of unvisited nodes
int findMinDistance(int distance[], int visited[], int n) {
    int minDist = INF, minIndex = -1;
    for (int i = 1; i <= n; i++) {
        if (!visited[i] && distance[i] < minDist) {
            minDist = distance[i];
            minIndex = i;
        }
    }
    return minIndex;
}

// Function to calculate the minimum time it takes for all the nodes to receive the signal
int networkDelayTime(struct Edge times[], int n, int m, int k) {
    // Initialize the adjacency matrix to INF
    int adjMatrix[MAX_NODES + 1][MAX_NODES + 1];
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            adjMatrix[i][j] = INF;
        }
    }

    // Build the adjacency matrix
    for (int i = 0; i < m; i++) {
        adjMatrix[times[i].source][times[i].target] = times[i].weight;
    }

    // Initialize the distance array to INF
    int distance[MAX_NODES + 1];
    for (int i = 1; i <= n; i++) {
        distance[i] = INF;
    }

    // Distance to the starting node is 0
    distance[k] = 0;

    // Initialize the visited array to false
    int visited[MAX_NODES + 1] = { 0 };

    // Find the minimum distance node and update the distance array
    for (int i = 1; i <= n; i++) {
        int u = findMinDistance(distance, visited, n);
        if (u == -1) {
            break;
        }
        visited[u] = 1;
        for (int v = 1; v <= n; v++) {
            if (adjMatrix[u][v] != INF && distance[u] != INF && distance[u] + adjMatrix[u][v] < distance[v]) {
                distance[v] = distance[u] + adjMatrix[u][v];
            }
        }
    }

    // Find the maximum distance in the distance array
    int maxDist = 0;
    for (int i = 1; i <= n; i++) {
        if (distance[i] == INF) {
            return -1;
        }
        if (distance[i] > maxDist) {
            maxDist = distance[i];
        }
    }

    return maxDist;
}

// Driver code
int main() {
    int n = 4, m = 3, k = 2;
    struct Edge times[3] = { { 2, 1, 1 }, { 2, 3, 1 }, { 3, 4, 1 } };
    int result = networkDelayTime(times, n, m, k);
    printf("%d", result);
    return 0;
}